name: Publish (parallel)

on:
  workflow_dispatch:
    inputs:
      push:
        description: 'Push image to registry? (true/false)'
        default: false
  push:
    branches: ['release']

env:
  REGISTRY: ghcr.io
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.result }}
      images: ${{ steps.images.outputs.result }}
      version: ${{ steps.version.outputs.value }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Delete Old Artifacts
        uses: actions/github-script@v6
        id: artifact
        with:
          script: |
            github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            }).then(res => {
              console.log("Artifacts: %o", res.data.artifacts);
              res.data.artifacts.forEach(({ id }) => {
                github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: id,
                })
              })
            })

      - name: Output PLATFORMS as JSON
        uses: actions/github-script@v6
        id: platforms
        with:
          script: |
            return process.env.PLATFORMS?.split(",") || [];

      - name: Output IMAGES based on PLATFORMS (with slashes replaced with underscores)
        uses: actions/github-script@v6
        id: images
        with:
          script: |
            const platforms = process.env.PLATFORMS?.split(",") || [];
            return platforms.map(platform => {
              return process.env.IMAGE + ':' + platform.replace("/", "_");
            });        

      - name: Read version from package.json with fallback
        uses: amochkin/action-json@v1
        id: version
        with:
          property: version
          fallback: 0.0.0
          ### If we're not on the release branch, use the fallback version (0.0.0):
          use_override: ${{ github.ref_name != 'release' }}
          override_with: 0.0.0

  build:
    needs: prepare
    timeout-minutes: 30
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.platforms) }}

    steps:
      - name: Setup environment variables
        run: |
          echo "TAG=${{ matrix.platform }}" | tr "/" "_" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      ### Setup BuildX so we can build for multiple platforms
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      ### Build and push the image
      - name: Build Docker image for ${{ matrix.platform }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG }}

  publish:
    needs: [build, prepare]
    runs-on: ubuntu-latest

    env:
      IMAGES: ${{ join(fromJson(needs.build.outputs.images), ' ') }}

    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ### Add 'sha-${sha}' tag for all branches:
                  type=sha,enable=true,priority=100,prefix=sha-,suffix=,format=short
            ### Add '${version}' tag for all branches:
                  type=raw,value=${{ needs.prepare.outputs.version }}
            ### Add 'release' tag for release branch:
                  type=raw,value=release,enable=${{ github.ref == format('refs/heads/{0}', 'release') }}
            ### Add 'latest' tag for default branch:
                  type=raw,value=latest,enable={{is_default_branch}}

      - name: Create manifest
        run: |
          echo "Docker images:" && docker image ls -a
          echo "Creating manifest for ${{ env.IMAGE_NAME }}:latest"
          docker manifest create ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGES }}

      - name: Push manifest
        run: |
          echo "Pushing manifest for ${{ env.IMAGE_NAME }}:latest"
          docker manifest push ${{ env.IMAGE_NAME }}:latest

      - name: Inspect manifest
        run: docker manifest inspect ${{ env.IMAGE_NAME }}:latest
